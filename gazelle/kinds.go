package scala

import (
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const (
	scalaBinaryKind  = "scala_binary"
	scalaLibraryKind = "scala_library"
	scalaTestKind    = "scala_test"
)

// Kinds returns a map that maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds.
func (*Scala) Kinds() map[string]rule.KindInfo {
	return scalaKinds
}

var scalaKinds = map[string]rule.KindInfo{
	scalaBinaryKind: {
		MatchAny: true,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"main":       true,
			"srcs":       true,
			"imports":    true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
	scalaLibraryKind: {
		MatchAny: true,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"srcs":       true,
			"imports":    true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
	scalaTestKind: {
		MatchAny: true,
		NonEmptyAttrs: map[string]bool{
			"deps":       true,
			"main":       true,
			"srcs":       true,
			"imports":    true,
			"visibility": true,
		},
		SubstituteAttrs: map[string]bool{},
		MergeableAttrs: map[string]bool{
			"srcs": true,
		},
		ResolveAttrs: map[string]bool{
			"deps": true,
		},
	},
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (scala *Scala) Loads() []rule.LoadInfo {
	return scalaLoads
}

var scalaLoads = []rule.LoadInfo{
	{
		Name: "@rules_scala//python:defs.bzl",
		Symbols: []string{
			scalaBinaryKind,
			scalaLibraryKind,
			scalaTestKind,
		},
	},
}
